---
title: "Programming Practice: Term project"
execute:
  enabled: true
  echo: true
  cache: true
format:
  html:
    code-fold: false
jupyter: python3
diagram:
  cache: true
  cache-dir: ./cache
  engine:
    tikz:
      execpath: lualatex
filters:
  - diagram
---
# Description

The idea is to develop a simple 1-on-1 messaging app.

It will contain the following components:

- client
- server
- database
- analytics module

## Client
We should use [Textual](https://textual.textualize.io) for the UI.

Client->Server communication should be setup via REST API calls.

## Server
Will have two modules:

- **client interaction**. This will be performed via REST API interface mentioned above.
  Libraries like 
  - [FastAPI](https://github.com/FastAPI/FastAPI),
  - [Django](https://www.djangoproject.com),
  - or [Flask](https://flask.palletsprojects.com/en/stable/),

  are all good.
- **database**. Please use SQLite.

## Database
An embedded Sqlite database running on server. Should contain the following information:

- registered users (clients)
- messages, that should, in addition to message text, contain timestamps and delivery status (delivered/read)
- relation between messages and clients

## Analytics
Can be a simple Python script that can generate usage statistics plots based on SQLite database information. Useful info includes:

- number of messages sent per client
- temporal frequency of messages
- average message length
- anything else you can think of

# Project deliverables

1. Working message delivery with minimum 3 users.
2. Project documentation: architecture, description, diagrams (Markdown/Mermaid)
3. Jupyter notebook showing analytics code and results.
4. Bonus points for automated tests.

# Grading
Max 40 points split as follows:

- 10 points for working client
- 10 points for server
- 10 points for SQLite database
- 10 points for analytics and documentation

# Code example

Necessary libraries:
```python
pip install "fastapi[standard]" # REST API
pip install pydantic # facilitates JSON parsing for FastAPI
pip install requests # will be used on the client
```

Following is `server.py` script:
```python
from typing import Union
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()
class Message(BaseModel):
    msg: str

messages = list()

@app.get("/fetchMessages")
def fetch_messages():
    return {"data": messages} #[m for m in messages]}

@app.post("/sendMessage/{msg}")
def send_message(m: Message):
    messages.append(m)
    return {"status": "ok"}
```

And here is the `client.py` script:
```python
import requests

# First send a message
api_url = "http://localhost:8000/sendMessage/msg"
msgJson = {"msg": "Whazzuuuppp"}
response = requests.post(api_url, json=msgJson)

print(response.json())

# Then another
msgJson = {"msg": "Howdy"}
response = requests.post(api_url, json=msgJson)

print(response.json())


# Now check messages delivered to server
api_url = "http://localhost:8000/fetchMessages"
response = requests.get(api_url)
print(response.json())

```
Start server with:
```python
fastapi dev server.py
```

Then run client with
```python
python client.py
```

In client shell you should see:
```python
{'status': 'ok'}
{'status': 'ok'}
{'data': [{'msg': 'Whazzuuuppp'}, {'msg': 'Howdy'}]}
```

