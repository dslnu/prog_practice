[
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Programming Practice: Term project",
    "section": "",
    "text": "The idea is to develop a simple 1-on-1 messaging app.\nIt will contain the following components:\n\nclient\nserver\ndatabase\nanalytics module\n\n\n\nWe should use Textual for the UI.\nClient-&gt;Server communication should be setup via REST API calls.\n\n\n\nWill have two modules:\n\nclient interaction. This will be performed via REST API interface mentioned above. Libraries like\n\nFastAPI,\nDjango,\nor Flask,\n\nare all good.\ndatabase. Please use SQLite.\n\n\n\n\nAn embedded Sqlite database running on server. Should contain the following information:\n\nregistered users (clients)\nmessages, that should, in addition to message text, contain timestamps and delivery status (delivered/read)\nrelation between messages and clients\n\n\n\n\nCan be a simple Python script that can generate usage statistics plots based on SQLite database information. Useful info includes:\n\nnumber of messages sent per client\ntemporal frequency of messages\naverage message length\nanything else you can think of"
  },
  {
    "objectID": "project.html#client",
    "href": "project.html#client",
    "title": "Programming Practice: Term project",
    "section": "",
    "text": "We should use Textual for the UI.\nClient-&gt;Server communication should be setup via REST API calls."
  },
  {
    "objectID": "project.html#server",
    "href": "project.html#server",
    "title": "Programming Practice: Term project",
    "section": "",
    "text": "Will have two modules:\n\nclient interaction. This will be performed via REST API interface mentioned above. Libraries like\n\nFastAPI,\nDjango,\nor Flask,\n\nare all good.\ndatabase. Please use SQLite."
  },
  {
    "objectID": "project.html#database",
    "href": "project.html#database",
    "title": "Programming Practice: Term project",
    "section": "",
    "text": "An embedded Sqlite database running on server. Should contain the following information:\n\nregistered users (clients)\nmessages, that should, in addition to message text, contain timestamps and delivery status (delivered/read)\nrelation between messages and clients"
  },
  {
    "objectID": "project.html#analytics",
    "href": "project.html#analytics",
    "title": "Programming Practice: Term project",
    "section": "",
    "text": "Can be a simple Python script that can generate usage statistics plots based on SQLite database information. Useful info includes:\n\nnumber of messages sent per client\ntemporal frequency of messages\naverage message length\nanything else you can think of"
  },
  {
    "objectID": "lab8.html",
    "href": "lab8.html",
    "title": "Programming Practice: Lab 8",
    "section": "",
    "text": "Exercises\nTask 1. Continue from where Lab 7 left off. Improve server code so that it integrates with BlockProcessor and fetches block data given its ID.\n\n\nRecommended reading\n\nRequests library: https://docs.python-requests.org/en/latest/index.html\nJSON library: https://www.w3schools.com/python/python_json.asp"
  },
  {
    "objectID": "lab4.html",
    "href": "lab4.html",
    "title": "Programming Practice: Lab 4",
    "section": "",
    "text": "How does one create a branch?\ngit branch some_branch\nThen, in order to merge some_branch into master, one can do:\ngit checkout master\ngit merge some_branch\nAlternatively, instead of git merge, a (preferred way) is rebasing:\nInside some_branch:\ngit rebase -i master\nAnd then\ngit checkout master\ngit merge some_branch\nIn this case, git merge will be a fast-forward merge, and no merge commit will be created.\n\n\n\nhttps://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging\nhttps://git-scm.com/book/en/v2/Git-Branching-Rebasing"
  },
  {
    "objectID": "lab4.html#recommended-reading",
    "href": "lab4.html#recommended-reading",
    "title": "Programming Practice: Lab 4",
    "section": "",
    "text": "https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging\nhttps://git-scm.com/book/en/v2/Git-Branching-Rebasing"
  },
  {
    "objectID": "lab4.html#what-is-a-tree",
    "href": "lab4.html#what-is-a-tree",
    "title": "Programming Practice: Lab 4",
    "section": "What is a tree?",
    "text": "What is a tree?\nTree is a graph-like structure, composed of nodes, where:\n\nthere must be a root node\neach node (including root) has 0 or more children.\n\nWe can build a tree in Python. First, we define a tree node:\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.children = []\nA binary tree is a tree where each node has no more than 2 children.\nclass Node:\n    def __init__(self, value):\n        self.left = None\n        self.right = None\n        self.value = key\nA binary search tree is a binary tree where \\(\\forall ~\\text{node}: \\text{left\\_descendents} \\leq node &lt; \\text{right\\_descendents}\\).\n\nA complete tree is a tree where each level is fully filled, possibly except for the last level.\nA full tree is a binary tree where each node has either 0 or 2 children.\nA perfect tree is a complete and full tree."
  },
  {
    "objectID": "lab4.html#tree-traversal-types",
    "href": "lab4.html#tree-traversal-types",
    "title": "Programming Practice: Lab 4",
    "section": "Tree traversal types",
    "text": "Tree traversal types\nNow that we know what is a tree, we also need to know how to iterate through it (or traverse).\nThere are several types:\n\nPre-order\nprocess(node.value)\ntraverse(node.left)\ntraverse(node.right)\n\n\nIn-order\ntraverse(node.left)\nprocess(node.value)\ntraverse(node.right)\n\n\nPost-order\ntraverse(node.left)\ntraverse(node.right)\nprocess(node.value)"
  },
  {
    "objectID": "lab5.html",
    "href": "lab5.html",
    "title": "Programming Practice: Lab 5",
    "section": "",
    "text": "https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github\nLive editor: https://markdownlivepreview.com\n\n\n\n\n\nDocs: https://mermaid.js.org/intro/\nLive editor: https://mermaid.live"
  },
  {
    "objectID": "lab5.html#markdown",
    "href": "lab5.html#markdown",
    "title": "Programming Practice: Lab 5",
    "section": "",
    "text": "https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github\nLive editor: https://markdownlivepreview.com"
  },
  {
    "objectID": "lab5.html#mermaid",
    "href": "lab5.html#mermaid",
    "title": "Programming Practice: Lab 5",
    "section": "",
    "text": "Docs: https://mermaid.js.org/intro/\nLive editor: https://mermaid.live"
  },
  {
    "objectID": "lab6.html",
    "href": "lab6.html",
    "title": "Programming Practice: Lab 6",
    "section": "",
    "text": "SQL intro\nIn this lab we will extend BlockProcessor code with SQLite embedded database support.\n\n\nExercises\nTask 1. Add sqlite tables for BLOCKS and VOTES, together with a Python class handling DB manipulation.\nTask 2. Add a new table - PERSON. This will have the following fields:\n\nname: string\nbirth_year: integer\nip_addr: string\n\nTask 3. Extend VOTES with person_id field being a foreign key to PERSON.\n\nAll above tasks should have corresponding methods in Python code.\n\n\n\nRecommended reading\n\nSQLite tutorial: https://docs.python.org/3/library/sqlite3.html#sqlite3-tutorial"
  },
  {
    "objectID": "lab3.html",
    "href": "lab3.html",
    "title": "Programming Practice: Lab 3",
    "section": "",
    "text": "Python Regular Expressions\nRequired reading:\n\nOfficial Python package documentation.\nRegex cheatsheet\nCheatsheet with examples\n\n\n\nExercises\nTask 1. Write regexes that:\n\nremove all special (non-alphanumeric) characters from a string.\nmatch a word that contains a given character (e.g. “y”).\nmatch a word that is \\(n\\) characters long.\nmatch a word that begins with “a” OR “b” and ends with “s”.\n\nTask 2. Write a program that will\n\ncollect all monetary amounts from a given text.\nExample: “first amount is $123.45, second amount is $400” -&gt; [123.45, 400].\nconvert these to float numbers\nand sum them\n\nTask 3. Write a program that will cleanup Python source code by:\n\nremoving source code comments from Python code.\nremoving blank lines (hint: use \\r, \\n special characters)\n\nTask 4. Write a program that will convert dates in “yyyy-mm-dd” format to “dd-mm-yyyy” format.\nExample: 2024-02-11 -&gt; 11-02-2024."
  },
  {
    "objectID": "lab1.html",
    "href": "lab1.html",
    "title": "Programming Practice: Lab 1",
    "section": "",
    "text": "By block we will mean an object with two fields:\n\n\n\n\n\nblock-beta\n  block\n    columns 1\n    id[\"id: hexadecimal string\"]\n    view[\"view: positive integer\"]\n  end\n\n\n\n\n\n\nHere \\(\\text{view} \\in \\mathbb{Z}_+\\).\n\n\n\nBy vote we will mean a single-field object\n\n\n\n\n\nblock-beta\n  block_id[\"block_id: hexadecimal string\"]\n\n\n\n\n\n\n\n\n\nBy chain we will mean a sequence of block objects which:\n\nstart from block with view=0\nare monotonically ordered by view\nno gaps are allowed, e.g. block with view=3 cannot follow block with view=1\n\n\n\n\n\n\nflowchart LR\n  block1[\"`**Block 0** &lt;br/&gt; id: 0x54b &lt;br/&gt; view: 0`\"] --&gt; block2[\"`**Block 1** &lt;br/&gt; id: 0xfe3 &lt;br/&gt; view: 1`\"] --&gt; block3[\"`**Block 2** &lt;br/&gt; id: 0xab8 &lt;br/&gt; view: 2`\"]\n\n\n\n\n\n\nSo, for example, here are valid Python representations of these objects:\nblock1={\n  'id': '0x54b',\n  'view': 0\n}\nblock2={\n  'id': '0xfe3',\n  'view': 1\n}\nblock3={\n  'id': '0xab8',\n  'view': 1\n}\n\nvote={\n    'block_id': '0x234343'\n}\n\nchain = [block1, block2, block3]"
  },
  {
    "objectID": "lab1.html#preliminary-definitions",
    "href": "lab1.html#preliminary-definitions",
    "title": "Programming Practice: Lab 1",
    "section": "",
    "text": "By block we will mean an object with two fields:\n\n\n\n\n\nblock-beta\n  block\n    columns 1\n    id[\"id: hexadecimal string\"]\n    view[\"view: positive integer\"]\n  end\n\n\n\n\n\n\nHere \\(\\text{view} \\in \\mathbb{Z}_+\\).\n\n\n\nBy vote we will mean a single-field object\n\n\n\n\n\nblock-beta\n  block_id[\"block_id: hexadecimal string\"]\n\n\n\n\n\n\n\n\n\nBy chain we will mean a sequence of block objects which:\n\nstart from block with view=0\nare monotonically ordered by view\nno gaps are allowed, e.g. block with view=3 cannot follow block with view=1\n\n\n\n\n\n\nflowchart LR\n  block1[\"`**Block 0** &lt;br/&gt; id: 0x54b &lt;br/&gt; view: 0`\"] --&gt; block2[\"`**Block 1** &lt;br/&gt; id: 0xfe3 &lt;br/&gt; view: 1`\"] --&gt; block3[\"`**Block 2** &lt;br/&gt; id: 0xab8 &lt;br/&gt; view: 2`\"]\n\n\n\n\n\n\nSo, for example, here are valid Python representations of these objects:\nblock1={\n  'id': '0x54b',\n  'view': 0\n}\nblock2={\n  'id': '0xfe3',\n  'view': 1\n}\nblock3={\n  'id': '0xab8',\n  'view': 1\n}\n\nvote={\n    'block_id': '0x234343'\n}\n\nchain = [block1, block2, block3]"
  },
  {
    "objectID": "lab1.html#problem",
    "href": "lab1.html#problem",
    "title": "Programming Practice: Lab 1",
    "section": "Problem",
    "text": "Problem\nWe need to build a chain out of a random sequence of blocks and votes coming through input. We can only add a block with view=N to a chain if:\n\na vote for block’s id has been received earlier\ntip of the chain has the block with view=N-1\n\n\nImplementation details\nThere are two architectures to use when implementing the code:\n\nA0: class-based\nA1: functional\n\nAnd three types of inputs/outputs for the project:\n\nIO0: use command-line arguments\nIO1: use CSV files\nIO2: use SQL DB\n\nHence, 6 options total. So, if \\(N \\in {1,...,13}\\) is your number, the architecture/io to choose will be as follows:\n\narchitecture: \\(N \\mod 2\\)\nio: \\(N \\mod 3\\)\n\nE.g., if \\(N=8\\), then use A0 (class-based approach) and IO2 (SQL DB)."
  },
  {
    "objectID": "lab2.html",
    "href": "lab2.html",
    "title": "Programming Practice: Lab 2",
    "section": "",
    "text": "Git Fundamentals\n\nInstall Git for Windows.\nRun Git Bash.\nCreate a test directory: mkdir test.\nNavigate to test directory: cd test.\nCreate a test file: echo \"test contents\" &gt; test.txt.\nInitialize a Git repo: git init.\nCheck Git repo status: git status.\nAdd the test file: git add test.txt.\nCommit the test file: git commit -m \"Commit message\"\n\n\nGit will complain that it doesn’t know who you are. Update your name and email per it’s instructions.\n\n\nNavigate to GitHub and create your account and repository.\nCopy repository URL and set it in your local repo via git remote add origin &lt;GITHUB_REPO_URL&gt;.\nPush your local changes to remote repo: git push -u origin master.\n\n\nNote that -u option is only needed the first time you’re doing the push in any local branch.\n\n\n\nRecommended reading:\n\nhttps://git-scm.com/book/en/v2\n\n\n\nExercises\nTask 1. Create a repo for BlockProcessor task and push it to GitHub."
  },
  {
    "objectID": "lab7.html",
    "href": "lab7.html",
    "title": "Programming Practice: Lab 7",
    "section": "",
    "text": "In this lab we will simulate networking communication between client and server, where server will do somemeaningful work the client per its request and will give back some response.\n\n\nCreate server.py file with the following content:\n# load additional Python module\nimport socket, sys\n\n\n# create TCP/IP socket\nsock = socket.socket()\n\nport = 25002\nprint ('starting up on port ', port)\nsock.bind(('localhost', port))\n\nsock.listen(1)\n\nwhile True:\n    # wait for a connection\n    print ('waiting for a connection')\n    connection, client_address = sock.accept()\n\n    try:\n        # show who connected to us\n        print ('connection from', client_address)\n\n        # receive the data in small chunks and print it\n        while True:\n            data = connection.recv(512).decode()\n            if data:\n                # output received data\n                print (\"Data: \", data)\n            else:\n                # no more data -- quit the loop\n                print (\"no more data.\")\n                break\n\n    finally:\n        # Clean up the connection\n        connection.close()\n\nsock.close()\n\n\n\nCreate client.py file with the following content:\nimport socket\n\nclient_socket = socket.socket()\nport = 25002\nclient_socket.connect(('localhost', port))\nwhile True:\n    data = input(\"input msg (q to quit):\")\n\n    client_socket.sendall(data.encode('utf-8'))\n    if data.lower() == 'q':\n        client_socket.close()\n        break\n\n\n\nWe can use the following template code to fetch data given its URL:\nimport requests\n\n# Fetch url\nr = requests.get('https://wikipedia.org')\n# Response headers\nr.headers\n# Response Content\nr.text\n# OR\nr.json()"
  },
  {
    "objectID": "lab7.html#server",
    "href": "lab7.html#server",
    "title": "Programming Practice: Lab 7",
    "section": "",
    "text": "Create server.py file with the following content:\n# load additional Python module\nimport socket, sys\n\n\n# create TCP/IP socket\nsock = socket.socket()\n\nport = 25002\nprint ('starting up on port ', port)\nsock.bind(('localhost', port))\n\nsock.listen(1)\n\nwhile True:\n    # wait for a connection\n    print ('waiting for a connection')\n    connection, client_address = sock.accept()\n\n    try:\n        # show who connected to us\n        print ('connection from', client_address)\n\n        # receive the data in small chunks and print it\n        while True:\n            data = connection.recv(512).decode()\n            if data:\n                # output received data\n                print (\"Data: \", data)\n            else:\n                # no more data -- quit the loop\n                print (\"no more data.\")\n                break\n\n    finally:\n        # Clean up the connection\n        connection.close()\n\nsock.close()"
  },
  {
    "objectID": "lab7.html#client",
    "href": "lab7.html#client",
    "title": "Programming Practice: Lab 7",
    "section": "",
    "text": "Create client.py file with the following content:\nimport socket\n\nclient_socket = socket.socket()\nport = 25002\nclient_socket.connect(('localhost', port))\nwhile True:\n    data = input(\"input msg (q to quit):\")\n\n    client_socket.sendall(data.encode('utf-8'))\n    if data.lower() == 'q':\n        client_socket.close()\n        break"
  },
  {
    "objectID": "lab7.html#fetching-website-data",
    "href": "lab7.html#fetching-website-data",
    "title": "Programming Practice: Lab 7",
    "section": "",
    "text": "We can use the following template code to fetch data given its URL:\nimport requests\n\n# Fetch url\nr = requests.get('https://wikipedia.org')\n# Response headers\nr.headers\n# Response Content\nr.text\n# OR\nr.json()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Programming practice",
    "section": "",
    "text": "Lab 1\n\n\n\nLab 2\n\n\n\nLab 3\n\n\n\nLab 4\n\n\n\nLab 5\n\n\n\nLab 6\n\n\n\nLab 7\n\n\n\nLab 8\n\n\n\nProject"
  },
  {
    "objectID": "index.html#labs",
    "href": "index.html#labs",
    "title": "Programming practice",
    "section": "",
    "text": "Lab 1\n\n\n\nLab 2\n\n\n\nLab 3\n\n\n\nLab 4\n\n\n\nLab 5\n\n\n\nLab 6\n\n\n\nLab 7\n\n\n\nLab 8\n\n\n\nProject"
  },
  {
    "objectID": "index.html#assessment",
    "href": "index.html#assessment",
    "title": "Programming practice",
    "section": "Assessment",
    "text": "Assessment\n\n2 points max for each lesson\n4 points max for each lab (if submitted later than 2 weeks deadline, max points is 2)\n\nHence, max points to score during semester is \\((2+4)*16 = 96\\)."
  },
  {
    "objectID": "nb/Untitled.html",
    "href": "nb/Untitled.html",
    "title": "prog_practice",
    "section": "",
    "text": "block1={\n  'id': '0x54b',\n  'view': 0\n}\nblock2={\n  'id': '0xfe3',\n  'view': 1\n}\nblock3={\n  'id': '0xab8',\n  'view': 1\n}\n\nvote={\n    'block_id': '0x234343'\n}\n\nchain = [block1, block2, block3]\n\n\nprint(chain)\n\n[{'id': '0x54b', 'view': 0}, {'id': '0xfe3', 'view': 1}, {'id': '0xab8', 'view': 1}]\n\n\n\nimport re\n\n\nre.findall(r'\\w+', \"abcd023\")\n\n['abcd023']\n\n\n\n\\"
  }
]